using CP;

{string} node = ... ;
tuple edge_type {string edge_0;string edge_1;};
{edge_type}edge = ... ;
{string} color = ... ;
int card_color = card(color);
range int_color = 1..card_color;
dvar int col[node] in int_color;

dvar boolean usedColor[int_color];


minimize sum(L in int_color)(usedColor[L]);
subject to{
	forall(<x0,x1> in edge){
		(1*1*(col[x1]==col[x0]))>0 => false;
	}
	forall(L0 in int_color){
		(usedColor[L0])>0 => (sum(y0 in node) ((col[y0]==L0)))>0;
		(sum(y0 in node) ((col[y0]==L0)))>0 => (usedColor[L0])>0;
	}
};


